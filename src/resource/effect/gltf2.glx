uniform MeshUnif {
	highp vec3 sys_vEyePos;
	highp mat4 sys_mWorld;
	highp mat4 sys_mTrans;

	mediump float u_alphaCutoff;
	highp vec3 u_lightDir;
	bool u_hasNormal;

	sampler2D u_colorTex;
	mediump vec4 u_colorFactor;
	mediump float u_colorCoord;

	sampler2D u_mrTex;
	mediump vec2 u_mrFactor;
	mediump float u_mrCoord;

	sampler2D u_occlusionTex;
	mediump float u_occlusionFactor;
	mediump float u_occlusionCoord;

	sampler2D u_emissiveTex;
	mediump vec3 u_emissiveFactor;
	mediump float u_emissiveCoord;
	samplerCube u_environment;
}
uniform MeshUnif_Bump {
	sampler2D u_normalTex;
	mediump float u_normalCoord;
	mediump float u_normalFactor;
}

attribute MeshAttr {
	mediump vec3 a_pos : POSITION;
	highp vec3 a_normal : NORMAL;
	mediump vec2 a_uv0 : TEXCOORD_0;
	mediump vec2 a_uv1 : TEXCOORD_1;
	mediump vec4 a_color : COLOR_0;
}
attribute MeshAttr_Bump {
	highp vec4 a_tangent : TANGENT;
}
attribute MeshAttr_Morph {
	highp vec3 a_morph0 : MORPH_0;
	highp vec3 a_morph1 : MORPH_1;
	highp vec3 a_morph2 : MORPH_2;
	highp vec3 a_morph3 : MORPH_3;
	highp vec3 a_morph4 : MORPH_4;
	highp vec3 a_morph5 : MORPH_5;
	highp vec3 a_morph6 : MORPH_6;
	highp vec3 a_morph7 : MORPH_7;
}
uniform MeshUnif_Morph {
	highp vec4	u_posWeight[2];
	highp vec4	u_normalWeight[2];
	highp vec4	u_tangentWeight[2];
}

varying MeshVary {
	highp vec3 v_pos;

	highp vec3 v_normal;
	mediump vec2 v_colorUV;
	mediump vec2 v_mrUV;
	mediump vec2 v_occlusionUV;
	mediump vec2 v_emissiveUV;
	highp vec4 v_color;
}
varying MeshVary_Bump {
	highp vec4 v_tangent;
	mediump vec2 v_normalUV;
}

vertexshader(400) MeshVS() {
	vec3 lpos = a_pos;
	vec3 lnml = a_normal;
	#ifdef BUMPMAP
		vec3 ltan = a_tangent.xyz;
	#endif
	#ifdef MORPH
		lpos += + u_posWeight[0].x * a_morph0
				+ u_posWeight[0].y * a_morph1
				+ u_posWeight[0].z * a_morph2
				+ u_posWeight[0].w * a_morph3
				+ u_posWeight[1].x * a_morph4
				+ u_posWeight[1].y * a_morph5
				+ u_posWeight[1].z * a_morph6
				+ u_posWeight[1].w * a_morph7;
		lnml += + u_normalWeight[0].x * a_morph0
				+ u_normalWeight[0].y * a_morph1
				+ u_normalWeight[0].z * a_morph2
				+ u_normalWeight[0].w * a_morph3
				+ u_normalWeight[1].x * a_morph4
				+ u_normalWeight[1].y * a_morph5
				+ u_normalWeight[1].z * a_morph6
				+ u_normalWeight[1].w * a_morph7;
		#ifdef BUMPMAP
			ltan += + u_tangentWeight[0].x * a_morph0
					+ u_tangentWeight[0].y * a_morph1
					+ u_tangentWeight[0].z * a_morph2
					+ u_tangentWeight[0].w * a_morph3
					+ u_tangentWeight[1].x * a_morph4
					+ u_tangentWeight[1].y * a_morph5
					+ u_tangentWeight[1].z * a_morph6
					+ u_tangentWeight[1].w * a_morph7;
		#endif
	#endif

	#ifdef SKINMESH
		mat4 mWorld = a_weights.x * sys_mJoint[int(a_joints.x)] +
						a_weights.y * sys_mJoint[int(a_joints.y)] +
						a_weights.z * sys_mJoint[int(a_joints.z)] +
						a_weights.w * sys_mJoint[int(a_joints.w)];
		vec4 wpos = vec4(lpos, 1) * mWorld;
		v_normal = (vec4(lnml, 0) * mWorld).xyz;
		v_pos = wpos.xyz;
		gl_Position = wpos * sys_mViewProj;
	#else
		v_normal = (vec4(lnml, 0) * sys_mWorld).xyz;
		v_pos = (vec4(lpos, 1) * sys_mWorld).xyz;
		gl_Position = vec4(lpos, 1) * sys_mTrans;
	#endif

	v_color = a_color;
	v_colorUV = mix(a_uv0, a_uv1, u_colorCoord);
	v_mrUV = mix(a_uv0, a_uv1, u_mrCoord);
	v_occlusionUV = mix(a_uv0, a_uv1, u_occlusionCoord);
	v_emissiveUV = mix(a_uv0, a_uv1, u_emissiveCoord);
	#ifdef BUMPMAP
		#ifdef SKINMESH
			ltan = (vec4(ltan, 0) * mWorld).xyz;
		#else
			ltan = (vec4(ltan, 0) * sys_mWorld).xyz;
		#endif
		v_tangent = vec4(ltan, a_tangent.w);
		v_normalUV = mix(a_uv0, a_uv1, u_normalCoord);
	#endif
}
code Aux {
	#define SRGB_FAST
	vec4 SRGBtoLinear(const vec4 c) {
		#ifdef SRGB_FAST
			vec3 lc = pow(c.rgb, vec3(c_gamma));
		#else
			vec3 bLess = step(vec3(0.0405), c.rgb);
			vec3 lc = mix(c.rgb/vec3(12.92), pow((c.rgb+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess);
		#endif
		return vec4(lc, c.w);
	}
	float Square(const float v) {
		return v*v;
	}
	float _GeometricOcclusion(const float a2, const float d) {
		return (-1 + sqrt(1 + a2 * ((1 / (d*d)) - 1))) / 2;
	}
	float GeometricOcclusion(const float roughness, const float dNL, const float dNV) {
		/* float a2 = Square(Square(roughness)); */
		float a2 = Square(roughness+1) / 8;
		return 1 / (1 + _GeometricOcclusion(a2, dNL) + _GeometricOcclusion(a2, dNV));
	}
	float MicrofacedDistribution(const float roughness, const float dNH) {
		float a2 = Square(Square(roughness));
		return a2 / (c_pi * Square(Square(dNH) * (a2 - 1) + 1));
	}
	vec3 SurfaceReflectionRatio(const vec3 baseColor, const float metallic, const float dVH) {
		vec3 f0 = mix(vec3(c_dielectricSpecular), baseColor.rgb, metallic);
		return f0 + (vec3(1) - f0) * pow(1.0 - dVH, 5);
	}
}
const MeshConst {
	float c_pi = 3.14159265359;
	float c_minRoughness = 0.04;
	float c_dielectricSpecular = 0.04;
	vec3 c_black = [0 0 0];
	float c_gamma = 2.2;
}
fragmentshader(400, Aux) MeshFS() {
	vec3 V = normalize(sys_vEyePos - v_pos);
	vec3 L = u_lightDir;
	#ifdef BUMPMAP
		vec3 VN = normalize(v_normal);
		vec3 tan_v = normalize(v_tangent.xyz);
		vec3 bitan_v = normalize(cross(tan_v, VN) * v_tangent.w);
		mat3 toTSpace = mat3(tan_v, bitan_v, VN);
		vec3 N = texture2D(u_normalTex, v_normalUV).xyz;
		N = N-0.5;
		N *= 2;
		N.z /= u_normalFactor;
		N = toTSpace * N;
		N = normalize(N);
	#else
		vec3 N = u_hasNormal ? normalize(v_normal) : vec3(0,1,0);
	#endif
	vec3 H = normalize(L + V);

	vec4 baseColor = SRGBtoLinear(texture2D(u_colorTex, v_colorUV)) * u_colorFactor * v_color;
	if(baseColor.w <= u_alphaCutoff)
		discard;

	vec2 mr = texture2D(u_mrTex, v_mrUV).bg * u_mrFactor;
	float metallic = clamp(mr.r, 0, 1.0);
	float roughness = clamp(mr.g, c_minRoughness, 1.0);

	float dNL = dot(N,L);
	float dNV = dot(N,V);
	float dNH = dot(N,H);
	float dLH = dot(L,H);
	float dVH = dot(V,H);
	vec3 F = SurfaceReflectionRatio(baseColor.rgb, metallic, dVH);
	float G = GeometricOcclusion(roughness, dNL, dNV);
	float D = MicrofacedDistribution(roughness, dNH);
	vec3 cdiff = mix(baseColor.rgb * (1 - c_dielectricSpecular), c_black, metallic);
	vec3 diffuse = cdiff / c_pi;

	vec3 fdiffuse = (1 - F) * diffuse;
	vec3 fspecular = (F*G*D) / (4 * abs(dNL) * abs(dNV));
	vec3 f = fdiffuse + fspecular;

	vec3 color = f;
	color *= clamp(dNL, 0.02, 1);
	vec3 tmp = vec3(pow(clamp((1-dNV), 0, 1), 2));
	vec3 env_refl = SRGBtoLinear(textureCube(u_environment, -normalize(reflect(V, N)))).rgb * 2;
	color += env_refl * tmp * pow(1-roughness, 8);
	color += env_refl * fspecular * (1-roughness);
	color = mix(color, color*texture2D(u_occlusionTex, v_occlusionUV).r, u_occlusionFactor);
	color += SRGBtoLinear(texture2D(u_emissiveTex, v_emissiveUV)).rgb * u_emissiveFactor;
	gl_FragColor = vec4(pow(color, vec3(1.0/c_gamma)), baseColor.a);
}

technique Mesh {
	PolygonMode = Fill;
	Blend = true;
	BlendFunc = SrcAlpha InvSrcAlpha;
	CullFace = true;
	FrontFace = cw;
	DepthTest = true;
	DepthMask = true;
	DepthFunc = LessEqual;
	Attribute = MeshAttr;
	Uniform = MeshUnif;
	Varying = MeshVary;
	Const = MeshConst;

	VertexShader = MeshVS();
	FragmentShader = MeshFS();

	pass Default {}
	pass Bump {
		Attribute += MeshAttr_Bump;
		Varying += MeshVary_Bump;
		Uniform += MeshUnif_Bump;
		macro {
			BUMPMAP;
		}
	}
	pass Morph {
		Attribute += MeshAttr_Morph;
		Uniform += MeshUnif_Morph;
		macro {
			MORPH;
		}
	}
	pass Bump_Morph {
		Attribute += MeshAttr_Bump, MeshAttr_Morph;
		Uniform += MeshUnif_Bump, MeshUnif_Morph;
		Varying += MeshVary_Bump;
		macro {
			BUMPMAP;
			MORPH;
		}
	}
}

uniform MeshUnif_Skin : MeshUnif {
	highp mat4 sys_mJoint[32];
	highp mat4 sys_mViewProj;
}
attribute MeshAttr_Skin : MeshAttr {
	mediump vec4 a_joints : JOINT_0;
	mediump vec4 a_weights : WEIGHT_0;
}

technique Skin {
	PolygonMode = Fill;
	CullFace = false;
	FrontFace = cw;
	Blend = false;
	BlendFunc = SrcAlpha InvSrcAlpha;
	DepthTest = true;
	DepthMask = true;
	DepthFunc = LessEqual;
	Attribute = MeshAttr_Skin;
	Uniform = MeshUnif_Skin;
	Varying = MeshVary;
	Const = MeshConst;

	pass Default {
		macro {
			SKINMESH;
		}
		VertexShader = MeshVS();
		FragmentShader = MeshFS();
	}
	pass Bump {
		macro {
			SKINMESH;
		}
		VertexShader = MeshVS();
		FragmentShader = MeshFS();
	}
}
